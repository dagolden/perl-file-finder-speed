#!/usr/bin/env perl
use 5.12.0;;
use File::Find;
use File::Find::Rule;
use File::Next;
use Getopt::Long::Descriptive;
use Path::Class::Rule;
use Path::Iterator::Rule;
use Time::HiRes 'time';

my ($opt, $usage) = describe_options(
  '%c %o',
  [ 'class|C=s',    'which class to test', { required => 1 } ],
  [ 'maxfiles|x=i', 'fetch this many files and stop', { default => 200_000 } ],
  [ 'options|o=s',  'options to pass to finder, given as perl to eval' ],
  [ 'name!',        'print filename when done' ],
);

my $root  = '.';
my $max   = $opt->maxfiles;
my $fopt  = {};

if ($opt->options) {
  $fopt = eval $opt->options;
}

my $before = time;

if ($opt->class eq 'FFR') {
  my $iter  = File::Find::Rule->extras($fopt)->start($root);

  while (defined ( my $file = $iter->match )) {
    next unless $::i++ > $max;
    say $file if $opt->name;
    last;
  }
} elsif ($opt->class eq 'PCR') {
  my $iter  = Path::Class::Rule->new->iter($root, $fopt);

  while (defined ( my $file = $iter->() )) {
    next unless $::i++ > $max;
    say $file if $opt->name;
    last;
  }
} elsif ($opt->class eq 'PIR') {
  my $iter  = Path::Iterator::Rule->new->iter($root, $fopt);

  while (defined ( my $file = $iter->() )) {
    next unless $::i++ > $max;
    say $file if $opt->name;
    last;
  }
} elsif ($opt->class eq 'FN') {
  my $iter = File::Next::everything($fopt, $root);
  while (defined ( my $file = $iter->() )) {
    next unless $::i++ > $max;
    say $file if $opt->name;
    last;
  }
} elsif ($opt->class eq 'FF') {
  finddepth(
    sub {
      return unless $::i++ > $max;
      say $_ if $opt->name;
      goto DONE;
    },
    $root,
  );
  DONE: { 1 };
} else {
  die "unknown class"
}

my $after = time;
my $taken = $after - $before;

my $h = int(  $taken         / 3600 );
my $m = int( ($taken % 3600) /   60 );
my $s = $taken - $h * 3600 - $m * 60;

printf "%02u:%02u:%05.2f - %3s - %6u - %s\n",
  $h, $m, $s,
  $opt->class,
  $opt->maxfiles,
  $opt->options // '{}',
